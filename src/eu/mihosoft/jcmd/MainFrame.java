/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 28.05.2013, 17:05:23
 */
package eu.mihosoft.jcmd;

import com.thoughtworks.xstream.XStream;
import java.awt.FileDialog;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author miho
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        setLocationRelativeTo(null);
        String javaHome = System.getenv("JAVA_HOME");
        
        if (javaHome != null) {
            jdkPathField.setText(javaHome);
        }
        cdPathField.setText(System.getProperty("user.home"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jdkPathField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cdPathField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JSelect (2013 by mihosoft.eu)");

        jLabel1.setText("JDK-Home:");

        jdkPathField.setEditable(false);
        jdkPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdkPathFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Open CMD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Browse");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cdPathField.setEditable(false);
        cdPathField.setText("C:\\");
            cdPathField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cdPathFieldActionPerformed(evt);
                }
            });

            jLabel2.setText("CD:            ");

            jMenu1.setText("File");
            jMenu1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenu1ActionPerformed(evt);
                }
            });

            jMenuItem1.setText("Load Config");
            jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem1ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem1);

            jMenuItem2.setText("Save Config");
            jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem2ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem2);

            jMenuBar1.add(jMenu1);

            jMenu2.setText("Help");

            jMenuItem3.setText("About");
            jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem3ActionPerformed(evt);
                }
            });
            jMenu2.add(jMenuItem3);

            jMenuBar1.add(jMenu2);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jdkPathField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cdPathField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))
                            .addGap(28, 28, 28)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton3)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(368, 368, 368))))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(45, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jdkPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cdPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3))
                    .addGap(28, 28, 28)
                    .addComponent(jButton1)
                    .addGap(20, 20, 20))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jdkPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdkPathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jdkPathFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        openTerminal();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void openTerminal() {

        String[] args = {};

        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            args = new String[]{
                "cmd.exe", "/c", "start", "cmd.exe", "/K",
                "set JAVA_HOME=" + jdkPathField.getText()
                + "&set PATH=" + jdkPathField.getText() + "/bin;%PATH%"
                + "&java -version&cd " + cdPathField.getText()
            };
        } else {
            args = new String[]{
                "xterm", "-e",
                "JAVA_HOME=" + jdkPathField.getText()
                + ";PATH=" + jdkPathField.getText() + "/bin:$PATH"
                + ";java -version;cd " + cdPathField.getText() + "; /bin/bash"
            };
        }

        try {
            //
            Process builder = new ProcessBuilder((String[]) args).start();

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        chooseJDK(new File(jdkPathField.getText()));
    }//GEN-LAST:event_jButton2ActionPerformed

    private File chooseJDK(File dir) {
        //
        JFileChooser chooser = new JFileChooser(dir);

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (!f.isDirectory()) {
                    return false;
                } else {
                    return true;
                }
            }

            @Override
            public String getDescription() {
                return "JDK Home Folder";
            }
        });

        chooser.showOpenDialog(null);

        File path = chooser.getSelectedFile();

        if (path == null) {
            return null;
        }

        if (!isJDKHome(path)) {
            path = chooseJDK(path);
        }

        if (path != null) {
            jdkPathField.setText(path.getAbsolutePath());
        }

        return path;
    }

    private boolean isJDKHome(File path) {

        boolean hasBin = false;
        boolean hasJre = false;
        boolean hasLib = false;

        for (File f : path.listFiles()) {
            if (f.isDirectory()) {
                if (f.getName().toLowerCase().equals("bin")) {
                    hasBin = true;
                } else if (f.getName().toLowerCase().equals("jre")) {
                    hasJre = true;
                } else if (f.getName().toLowerCase().equals("lib")) {
                    hasLib = true;
                }
            }
        }

        return hasBin && hasJre && hasLib;
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //
        JFileChooser chooser = new JFileChooser(".");

        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || (f.isFile() && f.getName().endsWith(".jcmd"));
            }

            @Override
            public String getDescription() {
                return "JCMD Config";
            }
        });

        chooser.showOpenDialog(null);

        File file = chooser.getSelectedFile();

        if (file == null) {
            return;
        }

        XStream stream = new XStream();

        stream.alias("cmd-config", CMDConfig.class);

        CMDConfig config = (CMDConfig) stream.fromXML(file);

        if (config == null) {
            // TODO show error dialog
            return;
        }

        jdkPathField.setText(config.getJdkHomeFolder());
        cdPathField.setText(config.getCdPath());

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        //
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //

        //
        JFileChooser chooser = new JFileChooser(".");

        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || (f.isFile() && f.getName().endsWith(".jcmd"));
            }

            @Override
            public String getDescription() {
                return "JCMD Config";
            }
        });

        chooser.showSaveDialog(null);

        CMDConfig config = new CMDConfig();
        config.setJdkHomeFolder(jdkPathField.getText());
        config.setCdPath(cdPathField.getText());


        XStream stream = new XStream();
        stream.alias("cmd-config", CMDConfig.class);

        File file = chooser.getSelectedFile();

        if (file == null) {
            return;
        }

        if (!file.getName().toLowerCase().endsWith(".jcmd")) {
            file = new File(file.getAbsolutePath() + ".jcmd");
        }

        try {
            stream.toXML(config, new BufferedWriter(new FileWriter(file)));
        } catch (IOException ex) {
            // TODO add error dialog
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //

        JFileChooser chooser = new JFileChooser(cdPathField.getText());

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Directory";
            }
        });

        chooser.showOpenDialog(null);

        File openFile = chooser.getSelectedFile();

        if (openFile == null) {
            return;
        }

        cdPathField.setText(openFile.getAbsolutePath());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cdPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdPathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cdPathFieldActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        //
        AboutDialog about = new AboutDialog();
        about.setVisible(true);
        about.setLocationRelativeTo(this);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cdPathField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JTextField jdkPathField;
    // End of variables declaration//GEN-END:variables
}
